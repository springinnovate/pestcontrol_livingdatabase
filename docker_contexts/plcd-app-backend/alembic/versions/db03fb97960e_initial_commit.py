"""initial commit

Revision ID: db03fb97960e
Revises: 
Create Date: 2024-02-16 19:07:02.944360

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'db03fb97960e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('doi',
    sa.Column('id_key', sa.Integer(), nullable=False),
    sa.Column('doi', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id_key')
    )
    op.create_table('study',
    sa.Column('id_key', sa.Integer(), nullable=False),
    sa.Column('study_id', sa.String(), nullable=False),
    sa.Column('data_contributor', sa.String(), nullable=True),
    sa.Column('data_contributor_contact_info', sa.String(), nullable=True),
    sa.Column('study_metadata', sa.String(), nullable=True),
    sa.Column('response_types', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id_key')
    )
    op.create_table('sample',
    sa.Column('id_key', sa.Integer(), nullable=False),
    sa.Column('study_id', sa.Integer(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('manager', sa.String(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=True),
    sa.Column('day', sa.Integer(), nullable=True),
    sa.Column('local_time', sa.String(), nullable=True),
    sa.Column('replicate', sa.String(), nullable=True),
    sa.Column('sampling_effort', sa.String(), nullable=True),
    sa.Column('observation', sa.String(), nullable=False),
    sa.Column('observer_id', sa.String(), nullable=True),
    sa.Column('response_variable', sa.String(), nullable=False),
    sa.Column('units', sa.String(), nullable=True),
    sa.Column('sampling_method', sa.String(), nullable=False),
    sa.Column('sampler_type', sa.String(), nullable=True),
    sa.Column('functional_type', sa.String(), nullable=False),
    sa.Column('crop_commercial_name', sa.String(), nullable=False),
    sa.Column('crop_latin_name', sa.String(), nullable=False),
    sa.Column('abundance_class', sa.String(), nullable=True),
    sa.Column('order', sa.String(), nullable=True),
    sa.Column('family', sa.String(), nullable=True),
    sa.Column('genus', sa.String(), nullable=True),
    sa.Column('species', sa.String(), nullable=True),
    sa.Column('sub_species', sa.String(), nullable=True),
    sa.Column('morphospecies', sa.String(), nullable=True),
    sa.Column('life_stage', sa.String(), nullable=True),
    sa.Column('pest_class', sa.String(), nullable=True),
    sa.Column('pest_order', sa.String(), nullable=True),
    sa.Column('pest_family', sa.String(), nullable=True),
    sa.Column('pest_species', sa.String(), nullable=True),
    sa.Column('pest_sub_species', sa.String(), nullable=True),
    sa.Column('pest_morphospecies', sa.String(), nullable=True),
    sa.Column('pest_life_stage', sa.String(), nullable=True),
    sa.Column('enemy_class', sa.String(), nullable=True),
    sa.Column('enemy_order', sa.String(), nullable=True),
    sa.Column('enemy_family', sa.String(), nullable=True),
    sa.Column('enemy_species', sa.String(), nullable=True),
    sa.Column('enemy_sub_species', sa.String(), nullable=True),
    sa.Column('enemy_morphospecies', sa.String(), nullable=True),
    sa.Column('enemy_lifestage', sa.String(), nullable=True),
    sa.Column('growth_stage_of_crop_at_sampling', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['study_id'], ['study.id_key'], ),
    sa.PrimaryKeyConstraint('id_key')
    )
    op.create_table('study_doi_association',
    sa.Column('study_id', sa.Integer(), nullable=False),
    sa.Column('doi_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['doi_id'], ['doi.id_key'], ),
    sa.ForeignKeyConstraint(['study_id'], ['study.id_key'], ),
    sa.PrimaryKeyConstraint('study_id', 'doi_id')
    )
    op.create_table('covariate',
    sa.Column('id_key', sa.Integer(), nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=False),
    sa.Column('covariate_category', sa.String(), nullable=True),
    sa.Column('covariate_name', sa.String(), nullable=False),
    sa.Column('covariate_value', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.id_key'], ),
    sa.PrimaryKeyConstraint('id_key')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('covariate')
    op.drop_table('study_doi_association')
    op.drop_table('sample')
    op.drop_table('study')
    op.drop_table('doi')
    # ### end Alembic commands ###
